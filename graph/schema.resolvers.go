package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"ecommerce-service/graph/model"
	"fmt"

	"github.com/google/uuid"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id uuid.UUID, input model.ProductInput) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id uuid.UUID, status model.OrderStatus) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrderStatus - updateOrderStatus"))
}

// FetchProductsByCategoryID is the resolver for the fetchProductsByCategoryId field.
func (r *queryResolver) FetchProductsByCategoryID(ctx context.Context, categoryID *uuid.UUID) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: FetchProductsByCategoryID - fetchProductsByCategoryId"))
}

// FetchProductByID is the resolver for the fetchProductById field.
func (r *queryResolver) FetchProductByID(ctx context.Context, id uuid.UUID) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: FetchProductByID - fetchProductById"))
}

// FetchAverageProductPriceByCategoryID is the resolver for the fetchAverageProductPriceByCategoryId field.
func (r *queryResolver) FetchAverageProductPriceByCategoryID(ctx context.Context, categoryID uuid.UUID) (float64, error) {
	panic(fmt.Errorf("not implemented: FetchAverageProductPriceByCategoryID - fetchAverageProductPriceByCategoryId"))
}

// FetchCategories is the resolver for the fetchCategories field.
func (r *queryResolver) FetchCategories(ctx context.Context) ([]*model.Category, error) {
	panic(fmt.Errorf("not implemented: FetchCategories - fetchCategories"))
}

// FetchCategoryByID is the resolver for the fetchCategoryById field.
func (r *queryResolver) FetchCategoryByID(ctx context.Context, id uuid.UUID) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: FetchCategoryByID - fetchCategoryById"))
}

// FetchCustomer is the resolver for the fetchCustomer field.
func (r *queryResolver) FetchCustomer(ctx context.Context) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: FetchCustomer - fetchCustomer"))
}

// FetchCustomersOrders is the resolver for the fetchCustomersOrders field.
func (r *queryResolver) FetchCustomersOrders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: FetchCustomersOrders - fetchCustomersOrders"))
}

// FetchOrderByID is the resolver for the fetchOrderById field.
func (r *queryResolver) FetchOrderByID(ctx context.Context, id uuid.UUID) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: FetchOrderByID - fetchOrderById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
