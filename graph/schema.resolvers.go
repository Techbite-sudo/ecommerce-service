package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"ecommerce-service/engine/categories"
	"ecommerce-service/engine/orders"
	"ecommerce-service/engine/products"
	"ecommerce-service/engine/users"
	"ecommerce-service/graph/model"
	"ecommerce-service/middleware"
	"ecommerce-service/models"
	"errors"
	"fmt"
)

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (*model.User, error) {
	// Get the authenticated user ID from context
	userID := ctx.Value("user").(string)
	if userID == "" {
		return nil, errors.New("unauthorized")
	}
	// Update user profile using the users package
	return users.UpdateUserProfile(userID, input)
}

// PasswordResetRequest is the resolver for the PasswordResetRequest field.
func (r *mutationResolver) PasswordResetRequest(ctx context.Context, email string) (string, error) {
	return users.PasswordResetRequest(email)
}

// ResetPassword is the resolver for the ResetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input *model.PasswordResetInput) (bool, error) {
	return users.ResetPassword(input)
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	return products.CreateProduct(input)
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.ProductInput) (*model.Product, error) {
	return products.UpdateProduct(id, input)
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	return products.DeleteProduct(id)
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.CategoryInput) (*model.Category, error) {
	return categories.CreateCategory(input)
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input model.CategoryInput) (*model.Category, error) {
	return categories.UpdateCategory(id, input)
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	user := ctx.Value("user").(string)
	return orders.CreateOrder(input, user)
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id string, status model.OrderStatus) (*model.Order, error) {
	// Verify user is admin
	if err := middleware.RequireRole(ctx, models.RoleAdmin); err != nil {
		return nil, err
	}

	return orders.UpdateOrderStatus(id, status)
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Profile - profile"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, categoryID *string, search *string) ([]*model.Product, error) {
	return products.GetProducts(categoryID, search)
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	return products.GetProductByID(id)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	return categories.GetCategories()
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	return categories.GetCategoryByID(id)
}

// CategoryAveragePrice is the resolver for the categoryAveragePrice field.
func (r *queryResolver) CategoryAveragePrice(ctx context.Context, id string) (float64, error) {
	return products.GetCategoryAveragePrice(id)
}

// MyOrders is the resolver for the myOrders field.
func (r *queryResolver) MyOrders(ctx context.Context) ([]*model.Order, error) {
	user := ctx.Value("user").(string)
	return orders.GetUserOrders(user)
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	user := ctx.Value("user").(string)
	return orders.GetOrder(id, user)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
