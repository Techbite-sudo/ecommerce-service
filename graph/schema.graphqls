directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

type Query {
   # User queries
  profile: User!
  user(id: String!): User!

  # Product queries
  products(categoryId: String, search: String): [Product!]!
  product(id: String!): Product

  # Category queries
  categories: [Category!]!
  category(id: String!): Category
  categoryAveragePrice(id: String!): Float!

  # Order queries
  myOrders: [Order!]!
  order(id: String!): Order
}

type Mutation {
  # User mutations
  # RegisterUser(input: RegisterUserInput!): AuthPayload!
  # Login(input: LoginInput!): AuthPayload!
  updateProfile(input: UpdateProfileInput!): User!
  PasswordResetRequest(email: String!): String!
  ResetPassword(input: PasswordResetInput): Boolean!

  # Product mutations
  createProduct(input: ProductInput!): Product!
  updateProduct(id: String!, input: ProductInput!): Product!
  deleteProduct(id: String!): Boolean!

  # Category mutations
  createCategory(input: CategoryInput!): Category!
  updateCategory(id: String!, input: CategoryInput!): Category!
  deleteCategory(id: String!): Boolean!

  # Order mutations
  createOrder(input: OrderInput!): Order!
  updateOrderStatus(id: String!, status: OrderStatus!): Order!
}

type Category {
  id: ID!
  name: String!
  parentId: String
  parent: Category
  children: [Category!]
  products: [Product!]
  level: Int!
  createdAt: Time!
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  sku: String!
  categories: [Category!]!
  stock: Int!
  createdAt: Time!
}

type Order {
  id: ID!
  customer: User!
  items: [OrderItem!]!
  status: OrderStatus!
  total: Float!
  createdAt: Time!
}

type OrderItem {
  id: ID!
  product: Product!
  quantity: Int!
  unitPrice: Float!
  subTotal: Float!
}

input ProductInput {
  name: String!
  description: String
  price: Float!
  sku: String!
  categoryIds: [String!]!
  stock: Int!
}

input CategoryInput {
  name: String!
  parentId: String
}

input OrderItemInput {
  productId: String!
  quantity: Int!
}

input OrderInput {
  items: [OrderItemInput!]!
}

input UpdateProfileInput {
  phoneNumber: String
  country: String
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

type User {
  id: String!
  names: String!
  email: String!
  password: String!
  phoneNumber: String!
  country: String!
  role: Role!
  createdAt: Time!
}

type AuthPayload {
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  names: String!
  email: String!
  password: String!
  confirmPassword: String!
  phoneNumber: String!
  country: String!
  role: Role!
}

input PasswordResetInput {
  token: String!
  newPassword: String!
  confirmPassword: String!
}

enum Role {
  USER
  ADMIN
}
