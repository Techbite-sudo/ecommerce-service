// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type AuthPayload struct {
	Token    string    `json:"token"`
	Customer *Customer `json:"customer"`
}

type Category struct {
	ID       uuid.UUID   `json:"id"`
	Name     string      `json:"name"`
	Parent   *Category   `json:"parent,omitempty"`
	Children []*Category `json:"children,omitempty"`
	Products []*Product  `json:"products,omitempty"`
	Level    int32       `json:"level"`
}

type Customer struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phoneNumber"`
	Orders      []*Order  `json:"orders"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type Order struct {
	ID          uuid.UUID    `json:"id"`
	Customer    *Customer    `json:"customer"`
	Items       []*OrderItem `json:"items"`
	TotalAmount float64      `json:"totalAmount"`
	Status      OrderStatus  `json:"status"`
	CreatedAt   time.Time    `json:"createdAt"`
}

type OrderInput struct {
	Items []*OrderItemInput `json:"items"`
}

type OrderItem struct {
	ID       uuid.UUID `json:"id"`
	Product  *Product  `json:"product"`
	Quantity int32     `json:"quantity"`
	Price    float64   `json:"price"`
}

type OrderItemInput struct {
	ProductID uuid.UUID `json:"productId"`
	Quantity  int32     `json:"quantity"`
}

type Product struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Price       float64     `json:"price"`
	Description *string     `json:"description,omitempty"`
	Categories  []*Category `json:"categories"`
}

type ProductInput struct {
	Name        string      `json:"name"`
	Price       float64     `json:"price"`
	Description *string     `json:"description,omitempty"`
	CategoryIds []uuid.UUID `json:"categoryIds"`
}

type Query struct {
}

type RegisterInput struct {
	Name        string `json:"name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phoneNumber"`
}

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "PENDING"
	OrderStatusConfirmed OrderStatus = "CONFIRMED"
	OrderStatusShipped   OrderStatus = "SHIPPED"
	OrderStatusDelivered OrderStatus = "DELIVERED"
	OrderStatusCancelled OrderStatus = "CANCELLED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusConfirmed,
	OrderStatusShipped,
	OrderStatusDelivered,
	OrderStatusCancelled,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusConfirmed, OrderStatusShipped, OrderStatusDelivered, OrderStatusCancelled:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
